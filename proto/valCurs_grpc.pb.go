// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: internal/proto/valCurs.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MockXMLDaily_AddValCurs_FullMethodName    = "/ValCurs.MockXMLDaily/AddValCurs"
	MockXMLDaily_DeleteValCurs_FullMethodName = "/ValCurs.MockXMLDaily/DeleteValCurs"
	MockXMLDaily_SetState_FullMethodName      = "/ValCurs.MockXMLDaily/SetState"
	MockXMLDaily_GetState_FullMethodName      = "/ValCurs.MockXMLDaily/GetState"
	MockXMLDaily_Reset_FullMethodName         = "/ValCurs.MockXMLDaily/Reset"
)

// MockXMLDailyClient is the client API for MockXMLDaily service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// gRPC сервис управления mock cbr.ru/scripts/XML_Daily
type MockXMLDailyClient interface {
	// Добавление mock данных
	AddValCurs(ctx context.Context, in *AddValCursRequest, opts ...grpc.CallOption) (*AddValCursResponse, error)
	// Удаление mock данных
	DeleteValCurs(ctx context.Context, in *DeleteValCursRequest, opts ...grpc.CallOption) (*DeleteValCursResponse, error)
	// Установка состояния
	SetState(ctx context.Context, in *SetStateRequest, opts ...grpc.CallOption) (*SetStateResponse, error)
	// Получение текущего состояния mock-данных
	GetState(ctx context.Context, in *GetStateRequest, opts ...grpc.CallOption) (*GetStateResponse, error)
	// Очистка всех данных (reset)
	Reset(ctx context.Context, in *ResetRequest, opts ...grpc.CallOption) (*ResetResponse, error)
}

type mockXMLDailyClient struct {
	cc grpc.ClientConnInterface
}

func NewMockXMLDailyClient(cc grpc.ClientConnInterface) MockXMLDailyClient {
	return &mockXMLDailyClient{cc}
}

func (c *mockXMLDailyClient) AddValCurs(ctx context.Context, in *AddValCursRequest, opts ...grpc.CallOption) (*AddValCursResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddValCursResponse)
	err := c.cc.Invoke(ctx, MockXMLDaily_AddValCurs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mockXMLDailyClient) DeleteValCurs(ctx context.Context, in *DeleteValCursRequest, opts ...grpc.CallOption) (*DeleteValCursResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteValCursResponse)
	err := c.cc.Invoke(ctx, MockXMLDaily_DeleteValCurs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mockXMLDailyClient) SetState(ctx context.Context, in *SetStateRequest, opts ...grpc.CallOption) (*SetStateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetStateResponse)
	err := c.cc.Invoke(ctx, MockXMLDaily_SetState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mockXMLDailyClient) GetState(ctx context.Context, in *GetStateRequest, opts ...grpc.CallOption) (*GetStateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStateResponse)
	err := c.cc.Invoke(ctx, MockXMLDaily_GetState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mockXMLDailyClient) Reset(ctx context.Context, in *ResetRequest, opts ...grpc.CallOption) (*ResetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResetResponse)
	err := c.cc.Invoke(ctx, MockXMLDaily_Reset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MockXMLDailyServer is the server API for MockXMLDaily service.
// All implementations must embed UnimplementedMockXMLDailyServer
// for forward compatibility.
//
// gRPC сервис управления mock cbr.ru/scripts/XML_Daily
type MockXMLDailyServer interface {
	// Добавление mock данных
	AddValCurs(context.Context, *AddValCursRequest) (*AddValCursResponse, error)
	// Удаление mock данных
	DeleteValCurs(context.Context, *DeleteValCursRequest) (*DeleteValCursResponse, error)
	// Установка состояния
	SetState(context.Context, *SetStateRequest) (*SetStateResponse, error)
	// Получение текущего состояния mock-данных
	GetState(context.Context, *GetStateRequest) (*GetStateResponse, error)
	// Очистка всех данных (reset)
	Reset(context.Context, *ResetRequest) (*ResetResponse, error)
	mustEmbedUnimplementedMockXMLDailyServer()
}

// UnimplementedMockXMLDailyServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMockXMLDailyServer struct{}

func (UnimplementedMockXMLDailyServer) AddValCurs(context.Context, *AddValCursRequest) (*AddValCursResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddValCurs not implemented")
}
func (UnimplementedMockXMLDailyServer) DeleteValCurs(context.Context, *DeleteValCursRequest) (*DeleteValCursResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteValCurs not implemented")
}
func (UnimplementedMockXMLDailyServer) SetState(context.Context, *SetStateRequest) (*SetStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetState not implemented")
}
func (UnimplementedMockXMLDailyServer) GetState(context.Context, *GetStateRequest) (*GetStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetState not implemented")
}
func (UnimplementedMockXMLDailyServer) Reset(context.Context, *ResetRequest) (*ResetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reset not implemented")
}
func (UnimplementedMockXMLDailyServer) mustEmbedUnimplementedMockXMLDailyServer() {}
func (UnimplementedMockXMLDailyServer) testEmbeddedByValue()                      {}

// UnsafeMockXMLDailyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MockXMLDailyServer will
// result in compilation errors.
type UnsafeMockXMLDailyServer interface {
	mustEmbedUnimplementedMockXMLDailyServer()
}

func RegisterMockXMLDailyServer(s grpc.ServiceRegistrar, srv MockXMLDailyServer) {
	// If the following call pancis, it indicates UnimplementedMockXMLDailyServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MockXMLDaily_ServiceDesc, srv)
}

func _MockXMLDaily_AddValCurs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddValCursRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MockXMLDailyServer).AddValCurs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MockXMLDaily_AddValCurs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MockXMLDailyServer).AddValCurs(ctx, req.(*AddValCursRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MockXMLDaily_DeleteValCurs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteValCursRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MockXMLDailyServer).DeleteValCurs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MockXMLDaily_DeleteValCurs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MockXMLDailyServer).DeleteValCurs(ctx, req.(*DeleteValCursRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MockXMLDaily_SetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MockXMLDailyServer).SetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MockXMLDaily_SetState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MockXMLDailyServer).SetState(ctx, req.(*SetStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MockXMLDaily_GetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MockXMLDailyServer).GetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MockXMLDaily_GetState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MockXMLDailyServer).GetState(ctx, req.(*GetStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MockXMLDaily_Reset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MockXMLDailyServer).Reset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MockXMLDaily_Reset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MockXMLDailyServer).Reset(ctx, req.(*ResetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MockXMLDaily_ServiceDesc is the grpc.ServiceDesc for MockXMLDaily service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MockXMLDaily_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ValCurs.MockXMLDaily",
	HandlerType: (*MockXMLDailyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddValCurs",
			Handler:    _MockXMLDaily_AddValCurs_Handler,
		},
		{
			MethodName: "DeleteValCurs",
			Handler:    _MockXMLDaily_DeleteValCurs_Handler,
		},
		{
			MethodName: "SetState",
			Handler:    _MockXMLDaily_SetState_Handler,
		},
		{
			MethodName: "GetState",
			Handler:    _MockXMLDaily_GetState_Handler,
		},
		{
			MethodName: "Reset",
			Handler:    _MockXMLDaily_Reset_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/proto/valCurs.proto",
}
